{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python38564bit2ef6f3a459904c2e943f99dc2c7c358b",
   "display_name": "Python 3.8.5 64-bit"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "<class 'tuple'>\n(0.23404255319148937, 23.404255319148938)\n"
    }
   ],
   "source": [
    "class Reliability:\n",
    "\n",
    "    #@staticmethod\n",
    "    #def getTotalNumber(list):\n",
    "    #    return len(list)\n",
    "\n",
    "    @staticmethod\n",
    "    def getNumberOfIntervals(failureNumber): #unos je ukupan broj otkaza\n",
    "        z1 = m.sqrt(failureNumber)\n",
    "        z2 = 1+3.3*(m.log10(failureNumber))\n",
    "        z3 = 5*m.log10(failureNumber)\n",
    "        return round(stat.mean([z1, z2, z3])) #za sada najbolji nacin koji imam da odredim ovo\n",
    "\n",
    "    @staticmethod\n",
    "    def getFailureFrequency(failurePerInterval,totalNumber):\n",
    "        freq = failurePerInterval/totalNumber\n",
    "        precentage = freq * 100\n",
    "        print(type((freq,precentage)))\n",
    "        return (freq,precentage)\n",
    "    \n",
    "    # @staticmethod\n",
    "    # def getFaliureIntensity():\n",
    "\n",
    "\n",
    "\n",
    "print(Reliability.getFailureFrequency(11,47))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}